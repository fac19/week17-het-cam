{"ast":null,"code":"import React, { useContext } from \"react\";\nimport { AppContext } from \"../utils/AppContext\";\n\nconst Airtable = require(\"airtable\");\n\nconst entriesTable = base(\"Entries\");\nconst studentTable = base(\"Students\"); // url = AIRTABLE_API_URL + / + AIRTABLE_BASE_ID + / + tableName;\n\nconst PostData = (event, context) => {\n  const tableName = event.queryStringParameters.table; // if (event.httpMethod !== \"POST\") {\n  //     return { statusCode: 405, body: \"Method not allowed - please POST\" };\n  // }\n};\n\nconst minifyRecord = record => {\n  return {\n    id: record.id,\n    fields: record.fields\n  };\n};\n\nconst postStudent = async fields => {\n  // const { loginInfo, setLoginInfo } = useContext(AppContext);\n  const token = JSON.parse(localStorage.getItem(\"token\"));\n  fields = JSON.parse(fields); // console.log(\"loginInfo\", loginInfo);\n  // console.log(fields);\n  // get user info from app context\n\n  console.log(\"token\", token);\n  console.log(token.email, token.full_name);\n  console.log(\"fields\", fields);\n  console.log(fields.gender, fields.dob, fields.country);\n\n  try {\n    const createdRecord = await studentTable.create([{\n      fields: {\n        Name: token.full_name,\n        Gender: fields.gender,\n        Email: token.email,\n        \"Current level\": 0,\n        DOB: fields.dob,\n        Country: fields.country\n      }\n    }]);\n    console.log(minifyRecord(createdRecord));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nconst postEntries = async fields => {\n  try {\n    const createdRecord = await entriesTable.create(fields);\n    console.log(minifyRecord(createdRecord));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nexport { postStudent, postEntries };","map":{"version":3,"sources":["/home/hettiemcc/documents/fac/projects/teach-fish-frontend/src/utils/post-data.js"],"names":["React","useContext","AppContext","Airtable","require","entriesTable","base","studentTable","PostData","event","context","tableName","queryStringParameters","table","minifyRecord","record","id","fields","postStudent","token","JSON","parse","localStorage","getItem","console","log","email","full_name","gender","dob","country","createdRecord","create","Name","Gender","Email","DOB","Country","err","error","postEntries"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,UAAT,QAA2B,qBAA3B;;AAEA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMC,YAAY,GAAGC,IAAI,CAAC,SAAD,CAAzB;AACA,MAAMC,YAAY,GAAGD,IAAI,CAAC,UAAD,CAAzB,C,CAEA;;AAEA,MAAME,QAAQ,GAAG,CAACC,KAAD,EAAQC,OAAR,KAAoB;AACnC,QAAMC,SAAS,GAAGF,KAAK,CAACG,qBAAN,CAA4BC,KAA9C,CADmC,CAGnC;AACA;AACA;AACD,CAND;;AAQA,MAAMC,YAAY,GAAIC,MAAD,IAAY;AAC/B,SAAO;AACLC,IAAAA,EAAE,EAAED,MAAM,CAACC,EADN;AAELC,IAAAA,MAAM,EAAEF,MAAM,CAACE;AAFV,GAAP;AAID,CALD;;AAOA,MAAMC,WAAW,GAAG,MAAOD,MAAP,IAAkB;AACpC;AACA,QAAME,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAd;AACAN,EAAAA,MAAM,GAAGG,IAAI,CAACC,KAAL,CAAWJ,MAAX,CAAT,CAHoC,CAIpC;AACA;AACA;;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBN,KAArB;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYN,KAAK,CAACO,KAAlB,EAAyBP,KAAK,CAACQ,SAA/B;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBR,MAAtB;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYR,MAAM,CAACW,MAAnB,EAA2BX,MAAM,CAACY,GAAlC,EAAuCZ,MAAM,CAACa,OAA9C;;AACA,MAAI;AACF,UAAMC,aAAa,GAAG,MAAMxB,YAAY,CAACyB,MAAb,CAAoB,CAC9C;AACEf,MAAAA,MAAM,EAAE;AACNgB,QAAAA,IAAI,EAAEd,KAAK,CAACQ,SADN;AAENO,QAAAA,MAAM,EAAEjB,MAAM,CAACW,MAFT;AAGNO,QAAAA,KAAK,EAAEhB,KAAK,CAACO,KAHP;AAIN,yBAAiB,CAJX;AAKNU,QAAAA,GAAG,EAAEnB,MAAM,CAACY,GALN;AAMNQ,QAAAA,OAAO,EAAEpB,MAAM,CAACa;AANV;AADV,KAD8C,CAApB,CAA5B;AAYAN,IAAAA,OAAO,CAACC,GAAR,CAAYX,YAAY,CAACiB,aAAD,CAAxB;AACD,GAdD,CAcE,OAAOO,GAAP,EAAY;AACZd,IAAAA,OAAO,CAACe,KAAR,CAAcD,GAAd;AACD;AACF,CA5BD;;AA8BA,MAAME,WAAW,GAAG,MAAOvB,MAAP,IAAkB;AACpC,MAAI;AACF,UAAMc,aAAa,GAAG,MAAM1B,YAAY,CAAC2B,MAAb,CAAoBf,MAApB,CAA5B;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYX,YAAY,CAACiB,aAAD,CAAxB;AACD,GAHD,CAGE,OAAOO,GAAP,EAAY;AACZd,IAAAA,OAAO,CAACe,KAAR,CAAcD,GAAd;AACD;AACF,CAPD;;AASA,SAASpB,WAAT,EAAsBsB,WAAtB","sourcesContent":["import React, { useContext } from \"react\";\nimport { AppContext } from \"../utils/AppContext\";\n\nconst Airtable = require(\"airtable\");\nconst entriesTable = base(\"Entries\");\nconst studentTable = base(\"Students\");\n\n// url = AIRTABLE_API_URL + / + AIRTABLE_BASE_ID + / + tableName;\n\nconst PostData = (event, context) => {\n  const tableName = event.queryStringParameters.table;\n\n  // if (event.httpMethod !== \"POST\") {\n  //     return { statusCode: 405, body: \"Method not allowed - please POST\" };\n  // }\n};\n\nconst minifyRecord = (record) => {\n  return {\n    id: record.id,\n    fields: record.fields,\n  };\n};\n\nconst postStudent = async (fields) => {\n  // const { loginInfo, setLoginInfo } = useContext(AppContext);\n  const token = JSON.parse(localStorage.getItem(\"token\"));\n  fields = JSON.parse(fields);\n  // console.log(\"loginInfo\", loginInfo);\n  // console.log(fields);\n  // get user info from app context\n  console.log(\"token\", token);\n  console.log(token.email, token.full_name);\n  console.log(\"fields\", fields);\n  console.log(fields.gender, fields.dob, fields.country);\n  try {\n    const createdRecord = await studentTable.create([\n      {\n        fields: {\n          Name: token.full_name,\n          Gender: fields.gender,\n          Email: token.email,\n          \"Current level\": 0,\n          DOB: fields.dob,\n          Country: fields.country,\n        },\n      },\n    ]);\n    console.log(minifyRecord(createdRecord));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nconst postEntries = async (fields) => {\n  try {\n    const createdRecord = await entriesTable.create(fields);\n    console.log(minifyRecord(createdRecord));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nexport { postStudent, postEntries };\n"]},"metadata":{},"sourceType":"module"}